// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers'

export class ImageProcessing {
  bb: flatbuffers.ByteBuffer | null = null
  bb_pos = 0
  __init(i: number, bb: flatbuffers.ByteBuffer): ImageProcessing {
    this.bb_pos = i
    this.bb = bb
    return this
  }

  static getRootAsImageProcessing(
    bb: flatbuffers.ByteBuffer,
    obj?: ImageProcessing,
  ): ImageProcessing {
    return (obj || new ImageProcessing()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb,
    )
  }

  static getSizePrefixedRootAsImageProcessing(
    bb: flatbuffers.ByteBuffer,
    obj?: ImageProcessing,
  ): ImageProcessing {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH)
    return (obj || new ImageProcessing()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb,
    )
  }

  width(): number {
    const offset = this.bb!.__offset(this.bb_pos, 4)
    return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0
  }

  height(): number {
    const offset = this.bb!.__offset(this.bb_pos, 6)
    return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0
  }

  buf(index: number): number | null {
    const offset = this.bb!.__offset(this.bb_pos, 8)
    return offset
      ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index)
      : 0
  }

  bufLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 8)
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0
  }

  bufArray(): Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 8)
    return offset
      ? new Uint8Array(
          this.bb!.bytes().buffer,
          this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),
          this.bb!.__vector_len(this.bb_pos + offset),
        )
      : null
  }

  static startImageProcessing(builder: flatbuffers.Builder) {
    builder.startObject(3)
  }

  static addWidth(builder: flatbuffers.Builder, width: number) {
    builder.addFieldInt32(0, width, 0)
  }

  static addHeight(builder: flatbuffers.Builder, height: number) {
    builder.addFieldInt32(1, height, 0)
  }

  static addBuf(builder: flatbuffers.Builder, bufOffset: flatbuffers.Offset) {
    builder.addFieldOffset(2, bufOffset, 0)
  }

  static createBufVector(
    builder: flatbuffers.Builder,
    data: number[] | Uint8Array,
  ): flatbuffers.Offset {
    builder.startVector(1, data.length, 1)
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addInt8(data[i]!)
    }
    return builder.endVector()
  }

  static startBufVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(1, numElems, 1)
  }

  static endImageProcessing(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject()
    builder.requiredField(offset, 8) // buf
    return offset
  }

  static finishImageProcessingBuffer(
    builder: flatbuffers.Builder,
    offset: flatbuffers.Offset,
  ) {
    builder.finish(offset)
  }

  static finishSizePrefixedImageProcessingBuffer(
    builder: flatbuffers.Builder,
    offset: flatbuffers.Offset,
  ) {
    builder.finish(offset, undefined, true)
  }

  static createImageProcessing(
    builder: flatbuffers.Builder,
    width: number,
    height: number,
    bufOffset: flatbuffers.Offset,
  ): flatbuffers.Offset {
    ImageProcessing.startImageProcessing(builder)
    ImageProcessing.addWidth(builder, width)
    ImageProcessing.addHeight(builder, height)
    ImageProcessing.addBuf(builder, bufOffset)
    return ImageProcessing.endImageProcessing(builder)
  }
}
