// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod image_processing {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum ImageProcessingOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ImageProcessing<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ImageProcessing<'a> {
  type Inner = ImageProcessing<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ImageProcessing<'a> {
  pub const VT_WIDTH: flatbuffers::VOffsetT = 4;
  pub const VT_HEIGHT: flatbuffers::VOffsetT = 6;
  pub const VT_BUF: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ImageProcessing { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ImageProcessingArgs<'args>
  ) -> flatbuffers::WIPOffset<ImageProcessing<'bldr>> {
    let mut builder = ImageProcessingBuilder::new(_fbb);
    if let Some(x) = args.buf { builder.add_buf(x); }
    builder.add_height(args.height);
    builder.add_width(args.width);
    builder.finish()
  }


  #[inline]
  pub fn width(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(ImageProcessing::VT_WIDTH, Some(0)).unwrap()}
  }
  #[inline]
  pub fn height(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(ImageProcessing::VT_HEIGHT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn buf(&self) -> flatbuffers::Vector<'a, u8> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(ImageProcessing::VT_BUF, None).unwrap()}
  }
}

impl flatbuffers::Verifiable for ImageProcessing<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u32>("width", Self::VT_WIDTH, false)?
     .visit_field::<u32>("height", Self::VT_HEIGHT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("buf", Self::VT_BUF, true)?
     .finish();
    Ok(())
  }
}
pub struct ImageProcessingArgs<'a> {
    pub width: u32,
    pub height: u32,
    pub buf: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
}
impl<'a> Default for ImageProcessingArgs<'a> {
  #[inline]
  fn default() -> Self {
    ImageProcessingArgs {
      width: 0,
      height: 0,
      buf: None, // required field
    }
  }
}

pub struct ImageProcessingBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ImageProcessingBuilder<'a, 'b> {
  #[inline]
  pub fn add_width(&mut self, width: u32) {
    self.fbb_.push_slot::<u32>(ImageProcessing::VT_WIDTH, width, 0);
  }
  #[inline]
  pub fn add_height(&mut self, height: u32) {
    self.fbb_.push_slot::<u32>(ImageProcessing::VT_HEIGHT, height, 0);
  }
  #[inline]
  pub fn add_buf(&mut self, buf: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ImageProcessing::VT_BUF, buf);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ImageProcessingBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ImageProcessingBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ImageProcessing<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, ImageProcessing::VT_BUF,"buf");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ImageProcessing<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ImageProcessing");
      ds.field("width", &self.width());
      ds.field("height", &self.height());
      ds.field("buf", &self.buf());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `ImageProcessing`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_image_processing_unchecked`.
pub fn root_as_image_processing(buf: &[u8]) -> Result<ImageProcessing, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<ImageProcessing>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `ImageProcessing` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_image_processing_unchecked`.
pub fn size_prefixed_root_as_image_processing(buf: &[u8]) -> Result<ImageProcessing, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<ImageProcessing>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `ImageProcessing` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_image_processing_unchecked`.
pub fn root_as_image_processing_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ImageProcessing<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<ImageProcessing<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `ImageProcessing` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_image_processing_unchecked`.
pub fn size_prefixed_root_as_image_processing_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ImageProcessing<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<ImageProcessing<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a ImageProcessing and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `ImageProcessing`.
pub unsafe fn root_as_image_processing_unchecked(buf: &[u8]) -> ImageProcessing {
  flatbuffers::root_unchecked::<ImageProcessing>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed ImageProcessing and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `ImageProcessing`.
pub unsafe fn size_prefixed_root_as_image_processing_unchecked(buf: &[u8]) -> ImageProcessing {
  flatbuffers::size_prefixed_root_unchecked::<ImageProcessing>(buf)
}
#[inline]
pub fn finish_image_processing_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<ImageProcessing<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_image_processing_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<ImageProcessing<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod image_processing

